///
/// AppleAuthOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AppleAuthOperation` to properly resolve imports.
namespace margelo::nitro::appleauth { enum class AppleAuthOperation; }
// Forward declaration of `AppleAuthScopes` to properly resolve imports.
namespace margelo::nitro::appleauth { enum class AppleAuthScopes; }

#include <optional>
#include "AppleAuthOperation.hpp"
#include <vector>
#include "AppleAuthScopes.hpp"
#include <string>

namespace margelo::nitro::appleauth {

  /**
   * A struct which can be represented as a JavaScript object (AppleAuthOptions).
   */
  struct AppleAuthOptions {
  public:
    std::optional<AppleAuthOperation> operation     SWIFT_PRIVATE;
    std::vector<AppleAuthScopes> scopes     SWIFT_PRIVATE;
    std::optional<std::string> nonce     SWIFT_PRIVATE;

  public:
    explicit AppleAuthOptions(std::optional<AppleAuthOperation> operation, std::vector<AppleAuthScopes> scopes, std::optional<std::string> nonce): operation(operation), scopes(scopes), nonce(nonce) {}
  };

} // namespace margelo::nitro::appleauth

namespace margelo::nitro {

  using namespace margelo::nitro::appleauth;

  // C++ AppleAuthOptions <> JS AppleAuthOptions (object)
  template <>
  struct JSIConverter<AppleAuthOptions> {
    static inline AppleAuthOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AppleAuthOptions(
        JSIConverter<std::optional<AppleAuthOperation>>::fromJSI(runtime, obj.getProperty(runtime, "operation")),
        JSIConverter<std::vector<AppleAuthScopes>>::fromJSI(runtime, obj.getProperty(runtime, "scopes")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "nonce"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AppleAuthOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "operation", JSIConverter<std::optional<AppleAuthOperation>>::toJSI(runtime, arg.operation));
      obj.setProperty(runtime, "scopes", JSIConverter<std::vector<AppleAuthScopes>>::toJSI(runtime, arg.scopes));
      obj.setProperty(runtime, "nonce", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.nonce));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<AppleAuthOperation>>::canConvert(runtime, obj.getProperty(runtime, "operation"))) return false;
      if (!JSIConverter<std::vector<AppleAuthScopes>>::canConvert(runtime, obj.getProperty(runtime, "scopes"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "nonce"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
