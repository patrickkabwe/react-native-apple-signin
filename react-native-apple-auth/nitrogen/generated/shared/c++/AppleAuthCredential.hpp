///
/// AppleAuthCredential.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::appleauth {

  /**
   * A struct which can be represented as a JavaScript object (AppleAuthCredential).
   */
  struct AppleAuthCredential {
  public:
    std::string user     SWIFT_PRIVATE;
    std::optional<std::string> email     SWIFT_PRIVATE;
    std::optional<std::string> fullName     SWIFT_PRIVATE;
    std::optional<std::string> authorizationCode     SWIFT_PRIVATE;
    std::optional<std::string> identityToken     SWIFT_PRIVATE;
    std::optional<std::string> state     SWIFT_PRIVATE;

  public:
    explicit AppleAuthCredential(std::string user, std::optional<std::string> email, std::optional<std::string> fullName, std::optional<std::string> authorizationCode, std::optional<std::string> identityToken, std::optional<std::string> state): user(user), email(email), fullName(fullName), authorizationCode(authorizationCode), identityToken(identityToken), state(state) {}
  };

} // namespace margelo::nitro::appleauth

namespace margelo::nitro {

  using namespace margelo::nitro::appleauth;

  // C++ AppleAuthCredential <> JS AppleAuthCredential (object)
  template <>
  struct JSIConverter<AppleAuthCredential> {
    static inline AppleAuthCredential fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AppleAuthCredential(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "user")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "email")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "fullName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "authorizationCode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "identityToken")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "state"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AppleAuthCredential& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "user", JSIConverter<std::string>::toJSI(runtime, arg.user));
      obj.setProperty(runtime, "email", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.email));
      obj.setProperty(runtime, "fullName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.fullName));
      obj.setProperty(runtime, "authorizationCode", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.authorizationCode));
      obj.setProperty(runtime, "identityToken", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.identityToken));
      obj.setProperty(runtime, "state", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.state));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "user"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "email"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "fullName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "authorizationCode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "identityToken"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "state"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
